// Return the name of the next breakpoint, or null for the last breakpoint.
//
// >> breakpoint-next(sm)
// >> "md"
@function breakpoint-next($name, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);

  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Return the minimum breakpoint width. Null for the smallest (first) breakpoint.
//
// >> breakpoint-min(sm)
// >> 576px
@function breakpoint-min($name) {
  $min: map-get($breakpoints, $name);

  @return if($min != 0, $min, null);
}

// Return te maximum breakpoint width. Null for the largest (last) breakpoint.
//
// >> breakpoint-max(sm)
// >> 767px
@function breakpoint-max($name) {
  $next: breakpoint-next($name);

  @return if($next, breakpoint-min($next) - 1px, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
// >> breakpoint-infix(xs)
// >> ""
// >> breakpoint-infix(sm)
// >> "-sm"
@function breakpoint-infix($name) {
  @return if(breakpoint-min($name) == null, '', '-#{$name}');
}

// Makes the @content apply to the given breakpoint and wider.
//
// >> @include media-breakpoint-up(sm) { ... }
// >> @media (min-width: 576px) { ... }
@mixin media-breakpoint-up($name) {
  $min: breakpoint-min($name);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Makes the @content apply to the given breakpoint and narrower.
//
// >> @include media-breakpoint-down(sm) { ... }
// >> @media (max-width: 767px) { ... }
@mixin media-breakpoint-down($name) {
  $max: breakpoint-max($name);

  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}
